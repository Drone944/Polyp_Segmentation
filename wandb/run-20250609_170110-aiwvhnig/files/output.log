[INFO] Using pretrained UNet from segmentation_models_pytorch.
Traceback (most recent call last):
  File "/home/neo/amFOSS/AI_Projects/Polyp_Segmentation/sweep.py", line 2, in <module>
    from train import train
  File "/home/neo/amFOSS/AI_Projects/Polyp_Segmentation/train.py", line 97, in <module>
    outputs = model(images)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/segmentation_models_pytorch/base/model.py", line 66, in forward
    features = self.encoder(x)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/segmentation_models_pytorch/encoders/efficientnet.py", line 77, in forward
    x = block(x, drop_connect_prob)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/segmentation_models_pytorch/encoders/_efficientnet.py", line 175, in forward
    x = self._depthwise_conv(x)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/segmentation_models_pytorch/encoders/_efficientnet.py", line 587, in forward
    x = self.static_padding(x)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1751, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1762, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/modules/padding.py", line 215, in forward
    return F.pad(input, self.padding, "constant", self.value)
           ~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/neo/amFOSS/venv/lib/python3.13/site-packages/torch/nn/functional.py", line 5209, in pad
    return torch._C._nn.pad(input, pad, mode, value)
           ~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 18.00 MiB. GPU 0 has a total capacity of 3.63 GiB of which 7.75 MiB is free. Including non-PyTorch memory, this process has 3.62 GiB memory in use. Of the allocated memory 3.50 GiB is allocated by PyTorch, and 60.18 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
